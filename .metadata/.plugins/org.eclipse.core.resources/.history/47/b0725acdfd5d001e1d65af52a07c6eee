import java.sql.SQLException;

public class Singleton {
	public static void main(String[] args) throws SQLException {

		Thread thread1 = new Thread(() -> {
			Database foo = Database.getInstance();
			foo.query("SELECT from Thread 1");
		});

		Thread thread2 = new Thread(() -> {
			Database bar = Database.getInstance();
			bar.query("SELECT from Thread 2");
		});

		// Iniciar as threads.
		thread1.start();
		thread2.start();

		try {
			// Aguardar até que ambas as threads terminem.
			thread1.join();
			thread2.join();
		} catch (InterruptedException e) {
			e.printStackTrace();
		}

	}
}

class Database {
	private static Database instance;

	private Database() {
		System.out.println("CRIOUUUUUUUUUUUUUUU");
	}

	// Método de acesso ao singleton usando o padrão Double-Checked Locking para
	// garantir thread-safety.
	public static Database getInstance() {
		if (instance == null) {
			synchronized (Database.class) {
				if (instance == null) {
					instance = new Database();
				}
			}
		}
		return instance;
	}

	public void query(String sql) {
		// Lógica de consulta ao banco de dados.
		System.out.println("Executando consulta: " + sql);
	}
}